#!/usr/bin/bash

alias rundb="psql -h db -U postgres"
alias rundebug="runserver --debugpy --debugpy-wait-for-attach"

cleandocker(){
    for i in {15..18}; do
    docker rmi $(docker image list "registry.gitlab.com/apertoso/docker/odoo/odoo${i}e" | awk '{print $1":"$2}' | gr    ep registry) 2> /dev/null
    done
    docker system prune -f
}

cleanup(){
    for dir in ~/Desktop/odoo/*/repos/*; do (cd "$dir" && git gone ); done
    for dir in ~/Desktop/odoo/*; do (cd "$dir/addons-extra" && find ./ -type l -exec file {} \;  | awk '/: broken/{print substr($1,3, length($1)-3)}' | xargs unlink); done
    cleandocker
}

newproject(){
    echo "Creating directory $1"
    moveinto $1
    echo "Setting up project"
    projectsetup --init "$2"
    bootstrap_configs
    echo "Getting latest database"
    dbrestore --drop --s3
    echo "Bootstrapping custom templates"
    setuptemplates
}

resetserver(){
    projectsetup -R
    projectsetup --update-all
    sleep 1
    if [ "$#" -eq 1 ]; then
        echo "restoring from zip file"
        dbrestore --drop --zip $@
    else
        echo "restoring from s3"
        dbrestore --drop --s3
    fi
    dbrestore --post
    cleandocker
}

gitsetbases(){
    projectsetup -r
    if [[ $PWD = ~/Desktop/odoo/*/** ]]; then
        local d="${PWD#~/Desktop/odoo/*/**}"
        cd "${PWD%"$d"}"
        resetcmd=$(cat .instance_data.json | python -c 'import sys, json; print("\n".join([f"cd repos/{k}\ngit checkout {v["branch"]}\ngit pull\ncd ../.." for k,v in json.load(sys.stdin)["branches"].items()]))')
        call_multiline $resetcmd
        cd $d
    else
        echo "not in a repository"
    fi
}

link(){
    curdir=${PWD##*/}
    echo $curdir
    while [[ $(ls | grep addons-extra | wc -l) == 0 ]]; do
        cd ..
    done
    cd addons-extra
    ln -s "../repos/$curdir/$1"
    cd "../repos/$curdir"
}

